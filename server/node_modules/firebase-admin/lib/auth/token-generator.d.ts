/*! firebase-admin v9.100.0-alpha.1 */
/*!
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { CryptoSigner } from '../utils/crypto-signer';
import { Algorithm } from 'jsonwebtoken';
export declare const BLACKLISTED_CLAIMS: string[];
/**
 * A CryptoSigner implementation that is used when communicating with the Auth emulator.
 * It produces unsigned tokens.
 */
export declare class EmulatedSigner implements CryptoSigner {
    algorithm: Algorithm;
    /**
     * @inheritDoc
     */
    sign(buffer: Buffer): Promise<Buffer>;
    /**
     * @inheritDoc
     */
    getAccountId(): Promise<string>;
}
/**
 * Class for generating different types of Firebase Auth tokens (JWTs).
 */
export declare class FirebaseTokenGenerator {
    readonly tenantId?: string | undefined;
    private readonly signer;
    /**
     * @param tenantId The tenant ID to use for the generated Firebase Auth
     *     Custom token. If absent, then no tenant ID claim will be set in the
     *     resulting JWT.
     */
    constructor(signer: CryptoSigner, tenantId?: string | undefined);
    /**
     * Creates a new Firebase Auth Custom token.
     *
     * @param uid The user ID to use for the generated Firebase Auth Custom token.
     * @param developerClaims Optional developer claims to include in the generated Firebase
     *     Auth Custom token.
     * @returns A Promise fulfilled with a Firebase Auth Custom token signed with a
     *     service account key and containing the provided payload.
     */
    createCustomToken(uid: string, developerClaims?: {
        [key: string]: any;
    }): Promise<string>;
    private encodeSegment;
    /**
     * Returns whether or not the provided developer claims are valid.
     *
     * @param developerClaims Optional developer claims to validate.
     * @returns True if the provided claims are valid; otherwise, false.
     */
    private isDeveloperClaimsValid_;
}
/**
 * Creates a new FirebaseAuthError by extracting the error code, message and other relevant
 * details from a CryptoSignerError.
 *
 * @param {Error} err The Error to convert into a FirebaseAuthError error
 * @return {FirebaseAuthError} A Firebase Auth error that can be returned to the user.
 */
export declare function handleCryptoSignerError(err: Error): Error;
