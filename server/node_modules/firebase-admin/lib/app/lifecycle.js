/*! firebase-admin v9.100.0-alpha.1 */
"use strict";
/*!
 * @license
 * Copyright 2021 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteApp = exports.getApps = exports.getApp = exports.initializeApp = exports.defaultNamespace = void 0;
var error_1 = require("../utils/error");
var firebase_namespace_1 = require("./firebase-namespace");
/**
 * In order to maintain backward compatibility, we instantiate a default namespace instance in
 * this module, and delegate all app lifecycle operations to it. In a future implementation where
 * the old admin namespace is no longer supported, we should remove this, and implement app
 * lifecycle management in this module itself.
 *
 * @internal
 */
exports.defaultNamespace = new firebase_namespace_1.FirebaseNamespace();
function initializeApp(options, name) {
    return exports.defaultNamespace.initializeApp(options, name);
}
exports.initializeApp = initializeApp;
function getApp(name) {
    return exports.defaultNamespace.app(name);
}
exports.getApp = getApp;
function getApps() {
    return exports.defaultNamespace.apps;
}
exports.getApps = getApps;
/**
 * Renders this given `App` unusable and frees the resources of
 * all associated services (though it does *not* clean up any backend
 * resources). When running the SDK locally, this method
 * must be called to ensure graceful termination of the process.
 *
 * @example
 * ```javascript
 * deleteApp(app)
 *   .then(function() {
 *     console.log("App deleted successfully");
 *   })
 *   .catch(function(error) {
 *     console.log("Error deleting app:", error);
 *   });
 * ```
 */
function deleteApp(app) {
    if (typeof app !== 'object' || app === null || !('options' in app)) {
        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'Invalid app argument.');
    }
    // Make sure the given app already exists.
    var existingApp = getApp(app.name);
    // Delegate delete operation to the App instance itself for now. This will tear down any
    // local app state, and also remove it from the global map.
    return existingApp.delete();
}
exports.deleteApp = deleteApp;
